generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  admin
  staff
  mahasiswa
  dosen
}

enum StatusTicket {
  progress
  pending
  cancel
  done
}

enum PriorityTicket {
  low
  medium
  high
  urgent
}

enum StaffDepartment {
  LAB
  TU
  REKTORAT
}

enum NotificationType {
  TICKET
  MESSAGE
}

model User {
  id            String  @id @default(cuid())
  nim           String? @unique
  nip           String? @unique
  name          String  
  email         String  @unique
  phone         String?  @unique
  password      String
  department    StaffDepartment?
  major         String?
  college       String?
  academicYear  String?
  position      String?
  image         String?
  role          RoleUser
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  createdTickets  Ticket[]  @relation("CreatedTickets")
  message         TicketMessage[]
  notifications   Notification[]

  assignedTickets Ticket[] @relation("AssignedTickets")
}

model Ticket {
  id            String    @id @default(cuid())
  status        StatusTicket
  priority      PriorityTicket
  subject       String
  description   String    @db.Text
  department    String
  categoryId    String
  subcategoryId String? 
  type          String
  userId        String
  assignedToId  String? 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  assignedTo    User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  user          User      @relation("CreatedTickets", fields: [userId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?   @relation(fields: [subcategoryId], references: [id])

  message       TicketMessage[]
  attachments   Attachment[]
}

model TicketMessage {
  id            String    @id @default(cuid())
  ticketId      String
  userId        String
  message       String    @db.Text
  isInternal    Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  attachments   Attachment[]
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  
  subcategories Subcategory[]
  tickets       Ticket[]
}

model Subcategory {
  id   String @id @default(cuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  tickets    Ticket[]

   @@unique([name, categoryId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String           
  message   String
  url       String
  isRead    Boolean          @default(false)
  type      NotificationType 
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Attachment {
  id        String    @id @default(cuid())
  fileName  String
  fileUrl   String
  ticketId  String?   // Terhubung ke Tiket
  messageId String?   // Terhubung ke Pesan
  createdAt DateTime  @default(now())

  ticket  Ticket?          @relation(fields: [ticketId], references: [id])
  message TicketMessage?   @relation(fields: [messageId], references: [id])
}